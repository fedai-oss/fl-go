// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/federation.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FederatedLearning_JoinFederation_FullMethodName = "/federation.FederatedLearning/JoinFederation"
	FederatedLearning_SubmitUpdate_FullMethodName   = "/federation.FederatedLearning/SubmitUpdate"
)

// FederatedLearningClient is the client API for FederatedLearning service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FederatedLearningClient interface {
	JoinFederation(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	SubmitUpdate(ctx context.Context, in *ModelUpdate, opts ...grpc.CallOption) (*Ack, error)
}

type federatedLearningClient struct {
	cc grpc.ClientConnInterface
}

func NewFederatedLearningClient(cc grpc.ClientConnInterface) FederatedLearningClient {
	return &federatedLearningClient{cc}
}

func (c *federatedLearningClient) JoinFederation(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, FederatedLearning_JoinFederation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedLearningClient) SubmitUpdate(ctx context.Context, in *ModelUpdate, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, FederatedLearning_SubmitUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FederatedLearningServer is the server API for FederatedLearning service.
// All implementations must embed UnimplementedFederatedLearningServer
// for forward compatibility.
type FederatedLearningServer interface {
	JoinFederation(context.Context, *JoinRequest) (*JoinResponse, error)
	SubmitUpdate(context.Context, *ModelUpdate) (*Ack, error)
	mustEmbedUnimplementedFederatedLearningServer()
}

// UnimplementedFederatedLearningServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFederatedLearningServer struct{}

func (UnimplementedFederatedLearningServer) JoinFederation(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinFederation not implemented")
}
func (UnimplementedFederatedLearningServer) SubmitUpdate(context.Context, *ModelUpdate) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUpdate not implemented")
}
func (UnimplementedFederatedLearningServer) mustEmbedUnimplementedFederatedLearningServer() {}
func (UnimplementedFederatedLearningServer) testEmbeddedByValue()                           {}

// UnsafeFederatedLearningServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FederatedLearningServer will
// result in compilation errors.
type UnsafeFederatedLearningServer interface {
	mustEmbedUnimplementedFederatedLearningServer()
}

func RegisterFederatedLearningServer(s grpc.ServiceRegistrar, srv FederatedLearningServer) {
	// If the following call pancis, it indicates UnimplementedFederatedLearningServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FederatedLearning_ServiceDesc, srv)
}

func _FederatedLearning_JoinFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedLearningServer).JoinFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedLearning_JoinFederation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedLearningServer).JoinFederation(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedLearning_SubmitUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedLearningServer).SubmitUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedLearning_SubmitUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedLearningServer).SubmitUpdate(ctx, req.(*ModelUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// FederatedLearning_ServiceDesc is the grpc.ServiceDesc for FederatedLearning service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FederatedLearning_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "federation.FederatedLearning",
	HandlerType: (*FederatedLearningServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinFederation",
			Handler:    _FederatedLearning_JoinFederation_Handler,
		},
		{
			MethodName: "SubmitUpdate",
			Handler:    _FederatedLearning_SubmitUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/federation.proto",
}
