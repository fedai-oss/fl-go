name: Release FL-GO

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # Job 1: Pre-release validation
  pre-release-validation:
    name: Pre-release Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision numpy

    - name: Run comprehensive tests
      run: |
        make test
        make validate

    - name: Verify version tag
      if: github.event_name == 'push'
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "Building release for tag: $TAG"
        # Verify tag format
        if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid tag format: $TAG (expected: vX.Y.Z)"
          exit 1
        fi

  # Job 2: Build release artifacts
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: pre-release-validation

    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64
            extension: .exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        BINARY_NAME="fx-${{ matrix.suffix }}${{ matrix.extension }}"
        
        # Build with version information
        go build -ldflags="-X main.version=${VERSION} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o "build/${BINARY_NAME}" cmd/fx/main.go
        
        # Create checksum
        cd build
        sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.suffix }}
        path: |
          build/fx-${{ matrix.suffix }}${{ matrix.extension }}
          build/fx-${{ matrix.suffix }}${{ matrix.extension }}.sha256
        retention-days: 30

  # Job 3: Create Docker images
  docker-release:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: pre-release-validation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get version and metadata
      id: meta
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/fedai-oss/fl-go:latest
          ghcr.io/fedai-oss/fl-go:${{ steps.meta.outputs.version }}
        labels: |
          org.opencontainers.image.title=FL-GO
          org.opencontainers.image.description=A Go implementation of OpenFL for Federated Learning
          org.opencontainers.image.version=${{ steps.meta.outputs.version }}
          org.opencontainers.image.created=${{ steps.meta.outputs.date }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

  # Job 4: Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-release, docker-release]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir release-assets
        find artifacts -name "fx-*" -type f | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/

    - name: Generate release notes
      id: release-notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          COMMITS=$(git log --oneline ${LAST_TAG}..HEAD)
        else
          COMMITS=$(git log --oneline HEAD)
        fi
        
        # Generate release notes
        cat > release-notes.md << EOF
        ## FL-GO $VERSION
        
        ### 🚀 Features
        - Synchronous Federated Learning with round-based training
        - Asynchronous Federated Learning based on Papaya paper
        - Staleness-aware aggregation for async FL
        - Comprehensive validation scripts
        - Docker support with multi-platform images
        
        ### 🔧 Technical Details
        - **Go Version**: 1.22+
        - **Python Support**: 3.9, 3.11
        - **Platforms**: Linux (amd64/arm64), macOS (amd64/arm64), Windows (amd64)
        - **Docker Images**: Available on GitHub Container Registry
        
        ### 📦 Installation
        
        #### Binary Installation
        Download the appropriate binary for your platform from the assets below.
        
        #### Docker
        \`\`\`bash
        docker pull ghcr.io/fedai-oss/fl-go:$VERSION
        \`\`\`
        
        #### From Source
        \`\`\`bash
        git clone https://github.com/fedai-oss/fl-go.git
        cd fl-go
        make build
        \`\`\`
        
        ### 🧪 Validation
        \`\`\`bash
        # Quick validation
        ./fx --help
        
        # Comprehensive FL validation
        make validate
        \`\`\`
        
        ### 📚 Documentation
        - [README](https://github.com/fedai-oss/fl-go/blob/main/README.md)
        - [Async FL Guide](https://github.com/fedai-oss/fl-go/blob/main/docs/ASYNC_FL.md)
        - [Validation Guide](https://github.com/fedai-oss/fl-go/blob/main/docs/VALIDATION.md)
        
        ### 🔄 Recent Changes
        $COMMITS
        
        ### ✅ Verification
        All binaries include SHA256 checksums. Verify downloads:
        \`\`\`bash
        sha256sum -c fx-*.sha256
        \`\`\`
        EOF

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        name: FL-GO ${{ github.ref_name }}
        bodyFile: release-notes.md
        artifacts: "release-assets/*"
        generateReleaseNotes: false
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

  # Job 5: Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version in documentation
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Update README with latest version
        sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" README.md || true
        
        # Update Docker documentation
        sed -i "s|ghcr.io/fedai-oss/fl-go:.*|ghcr.io/fedai-oss/fl-go:$VERSION|g" README.md || true

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No documentation changes needed"
        else
          git add .
          git commit -m "docs: update documentation for release ${{ github.ref_name }}"
          git push
        fi

  # Job 6: Notify on success
  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [create-release, update-docs]
    if: success()

    steps:
    - name: Notify release success
      run: |
        echo "🎉 FL-GO ${{ github.ref_name }} has been successfully released!"
        echo "📦 Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        echo "🐳 Docker Image: ghcr.io/fedai-oss/fl-go:${{ github.ref_name }}"
